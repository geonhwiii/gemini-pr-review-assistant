#!/bin/bash

# Gemini API를 사용한 AI PR 리뷰 및 분석 도구 (GitHub PR 연동)

# 설정 파일 위치
CONFIG_FILE="$HOME/.gemini-pr-review-config.json"

# 설정 파일 읽기 함수
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        LANGUAGE=$(cat "$CONFIG_FILE" | grep -o '"language":"[^"]*"' | cut -d'"' -f4)
        [ -z "$LANGUAGE" ] && LANGUAGE="ko"
    else
        LANGUAGE=""
    fi
}

# 설정 파일 저장 함수
save_config() {
    local lang=$1
    mkdir -p "$(dirname "$CONFIG_FILE")"
    echo '{"language":"'$lang'"}' > "$CONFIG_FILE"
}

# 언어별 메시지 함수
msg() {
    local key=$1
    local param1=$2
    local param2=$3
    case "$LANGUAGE" in
        "en")
            case "$key" in
                "welcome") echo "🔍 AI PR Review CLI - AI-powered pull request review and analysis" ;;
                "help_usage") echo "Usage:" ;;
                "help_review") echo "  aipr                    # Review current branch PR" ;;
                "help_branch") echo "  aipr <branch>           # Review specific branch PR" ;;
                "help_diff") echo "  aipr --diff <base>      # Compare with specific base branch" ;;
                "help_post") echo "  aipr --post-comment     # Post review as PR comment" ;;
                "help_options") echo "Options:" ;;
                "help_branch_desc") echo "  <branch>                # Target branch to review" ;;
                "help_diff_desc") echo "  --diff <base>           # Compare with base branch (default: main)" ;;
                "help_post_desc") echo "  --post-comment          # Post AI review as GitHub PR comment" ;;
                "help_configure_desc") echo "  --configure             # Configure language settings" ;;
                "help_version_desc") echo "  --version, -v           # Show version information" ;;
                "help_help_desc") echo "  --help, -h              # Show help" ;;
                "help_example") echo "Examples:" ;;
                "help_example_current") echo "  aipr                    # Review current branch" ;;
                "help_example_branch") echo "  aipr feature/login      # Review feature/login branch" ;;
                "help_example_diff") echo "  aipr --diff develop     # Compare current branch with develop" ;;
                "help_example_post") echo "  aipr --post-comment     # Review and post comment to PR" ;;
                "unknown_option") echo "❌ Unknown option:" ;;
                "usage_help") echo "Usage: aipr [branch] [--diff base] [--configure] [--help|-h]" ;;
                "not_git_repo") echo "❌ Not a Git repository." ;;
                "gemini_not_installed") echo "⚠️  Gemini CLI is not installed or not authenticated. Please follow these steps:
   1. Install: npm install -g @google/gemini-cli
   2. Authenticate: gemini (follow the authentication prompts)" ;;
                "current_branch") echo "📍 Current branch: $param1" ;;
                "analyzing_branch") echo "📝 Analyzing branch changes..." ;;
                "analyzing_diff") echo "📝 Analyzing differences between $param1 and $param2..." ;;
                "ai_reviewing") echo "🤖 AI is reviewing the PR..." ;;
                "ai_review_complete") echo "🎯 AI PR Review Complete:" ;;
                "no_changes") echo "📊 No changes found between branches." ;;
                "review_summary") echo "📋 Review Summary:" ;;
                "security_issues") echo "🔒 Security Issues:" ;;
                "performance_issues") echo "⚡ Performance Issues:" ;;
                "code_quality") echo "✨ Code Quality:" ;;
                "suggestions") echo "💡 Suggestions:" ;;
                "gh_not_installed") echo "⚠️  GitHub CLI is not installed. Install it to enable PR integration:
   brew install gh  # or visit https://cli.github.com" ;;
                "no_pr_found") echo "📍 No PR found for current branch. Creating review based on branch diff." ;;
                "pr_found") echo "📍 Found PR #$param1: $param2" ;;
                "debug_pr_search") echo "🔍 Searching for PR for branch: $param1" ;;
                "posting_comment") echo "📝 Posting review as PR comment..." ;;
                "comment_posted") echo "✅ Review comment posted to PR successfully!" ;;
                "comment_failed") echo "❌ Failed to post comment to PR." ;;
                "configure_title") echo "🌐 Language Configuration" ;;
                "configure_current") echo "📍 Current language: $param1" ;;
                "configure_select") echo "🔤 Select language / 언어를 선택하세요:" ;;
                "configure_korean") echo "  1. 한국어 (Korean)" ;;
                "configure_english") echo "  2. English" ;;
                "configure_prompt") echo "Enter choice (1-2): " ;;
                "configure_success") echo "✅ Language set to: $param1" ;;
                "configure_invalid") echo "❌ Invalid choice. Please select 1 or 2." ;;
                "first_run_title") echo "🎉 Welcome to AI PR Review Assistant!" ;;
                "first_run_subtitle") echo "First-time setup" ;;
                "first_run_desc") echo "Please select your preferred language for UI and review messages:" ;;
                *) echo "$key" ;;
            esac
            ;;
        *)
            case "$key" in
                "welcome") echo "🔍 AI PR Review CLI - AI 기반 풀 리퀘스트 리뷰 및 분석 도구" ;;
                "help_usage") echo "사용법:" ;;
                "help_review") echo "  aipr                    # 현재 브랜치 PR 리뷰" ;;
                "help_branch") echo "  aipr <브랜치>           # 특정 브랜치 PR 리뷰" ;;
                "help_diff") echo "  aipr --diff <베이스>    # 특정 베이스 브랜치와 비교" ;;
                "help_post") echo "  aipr --post-comment     # 리뷰를 PR 댓글로 작성" ;;
                "help_options") echo "옵션:" ;;
                "help_branch_desc") echo "  <브랜치>                # 리뷰할 대상 브랜치" ;;
                "help_diff_desc") echo "  --diff <베이스>         # 베이스 브랜치와 비교 (기본값: main)" ;;
                "help_post_desc") echo "  --post-comment          # AI 리뷰를 GitHub PR 댓글로 작성" ;;
                "help_configure_desc") echo "  --configure             # 언어 설정 변경" ;;
                "help_version_desc") echo "  --version, -v           # 버전 정보 표시" ;;
                "help_help_desc") echo "  --help, -h              # 도움말 표시" ;;
                "help_example") echo "예시:" ;;
                "help_example_current") echo "  aipr                    # 현재 브랜치 리뷰" ;;
                "help_example_branch") echo "  aipr feature/login      # feature/login 브랜치 리뷰" ;;
                "help_example_diff") echo "  aipr --diff develop     # 현재 브랜치와 develop 비교" ;;
                "help_example_post") echo "  aipr --post-comment     # 리뷰하고 PR에 댓글 작성" ;;
                "unknown_option") echo "❌ 알 수 없는 옵션:" ;;
                "usage_help") echo "사용법: aipr [브랜치] [--diff 베이스] [--configure] [--help|-h]" ;;
                "not_git_repo") echo "❌ Git 저장소가 아닙니다." ;;
                "gemini_not_installed") echo "⚠️  Gemini CLI가 설치되어 있지 않거나 인증이 완료되지 않았습니다. 다음 단계를 따라주세요:
   1. 설치: npm install -g @google/gemini-cli
   2. 인증: gemini (인증 과정을 따라 완료하세요)" ;;
                "current_branch") echo "📍 현재 브랜치: $param1" ;;
                "analyzing_branch") echo "📝 브랜치 변경사항을 분석합니다..." ;;
                "analyzing_diff") echo "📝 $param1과 $param2 간의 차이점을 분석합니다..." ;;
                "ai_reviewing") echo "🤖 AI가 PR을 리뷰 중입니다..." ;;
                "ai_review_complete") echo "🎯 AI PR 리뷰 완료:" ;;
                "no_changes") echo "📊 브랜치 간 변경사항이 없습니다." ;;
                "review_summary") echo "📋 리뷰 요약:" ;;
                "security_issues") echo "🔒 보안 이슈:" ;;
                "performance_issues") echo "⚡ 성능 이슈:" ;;
                "code_quality") echo "✨ 코드 품질:" ;;
                "suggestions") echo "💡 제안사항:" ;;
                "gh_not_installed") echo "⚠️  GitHub CLI가 설치되어 있지 않습니다. PR 연동을 위해 설치해주세요:
   brew install gh  # 또는 https://cli.github.com 방문" ;;
                "no_pr_found") echo "📍 현재 브랜치에 대한 PR을 찾을 수 없습니다. 브랜치 diff 기반으로 리뷰를 생성합니다." ;;
                "pr_found") echo "📍 PR #$param1 발견: $param2" ;;
                "debug_pr_search") echo "🔍 브랜치에 대한 PR 검색 중: $param1" ;;
                "posting_comment") echo "📝 PR 댓글로 리뷰를 작성 중입니다..." ;;
                "comment_posted") echo "✅ PR에 리뷰 댓글이 성공적으로 작성되었습니다!" ;;
                "comment_failed") echo "❌ PR 댓글 작성에 실패했습니다." ;;
                "configure_title") echo "🌐 언어 설정" ;;
                "configure_current") echo "📍 현재 언어: $param1" ;;
                "configure_select") echo "🔤 언어를 선택하세요 / Select language:" ;;
                "configure_korean") echo "  1. 한국어 (Korean)" ;;
                "configure_english") echo "  2. English" ;;
                "configure_prompt") echo "선택하세요 (1-2): " ;;
                "configure_success") echo "✅ 언어가 설정되었습니다: $param1" ;;
                "configure_invalid") echo "❌ 잘못된 선택입니다. 1 또는 2를 선택해주세요." ;;
                "first_run_title") echo "🎉 AI PR Review Assistant에 오신 것을 환영합니다!" ;;
                "first_run_subtitle") echo "최초 설정" ;;
                "first_run_desc") echo "UI와 리뷰 메시지에 사용할 언어를 선택해주세요:" ;;
                *) echo "$key" ;;
            esac
            ;;
    esac
}

# 언어 설정 함수
configure_language() {
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${BOLD}$(msg "configure_title")${NC}"
    echo -e "${BLUE}============================================================${NC}"
    echo ""
    
    if [ -n "$LANGUAGE" ]; then
        local current_lang_name
        if [ "$LANGUAGE" = "en" ]; then
            current_lang_name="English"
        else
            current_lang_name="한국어"
        fi
        echo -e "${CYAN}$(msg "configure_current" "$current_lang_name")${NC}"
        echo ""
    fi
    
    echo -e "${CYAN}$(msg "configure_select")${NC}"
    echo -e "$(msg "configure_korean")"
    echo -e "$(msg "configure_english")"
    echo ""
    
    while true; do
        read -p "$(msg "configure_prompt")" choice
        case $choice in
            1)
                LANGUAGE="ko"
                save_config "ko"
                echo -e "${GREEN}$(msg "configure_success" "한국어")${NC}"
                break
                ;;
            2)
                LANGUAGE="en"
                save_config "en"
                echo -e "${GREEN}$(msg "configure_success" "English")${NC}"
                break
                ;;
            *)
                echo -e "${RED}$(msg "configure_invalid")${NC}"
                ;;
        esac
    done
}

# 최초 실행 체크 및 언어 설정
first_time_setup() {
    echo -e "${MAGENTA}🎉 Welcome to AI PR Review Assistant!${NC}"
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${BOLD}First-time setup${NC}"
    echo -e "${BLUE}============================================================${NC}"
    echo ""
    echo -e "${CYAN}Please select your preferred language for UI and review messages:${NC}"
    echo ""
    
    echo -e "  1. 한국어 (Korean)"
    echo -e "  2. English"
    echo ""
    
    while true; do
        read -p "Select (1-2): " choice
        case $choice in
            1)
                LANGUAGE="ko"
                save_config "ko"
                echo ""
                echo -e "${GREEN}✅ 언어가 설정되었습니다: 한국어${NC}"
                echo ""
                break
                ;;
            2)
                LANGUAGE="en"
                save_config "en"
                echo ""
                echo -e "${GREEN}✅ Language set to: English${NC}"
                echo ""
                break
                ;;
            *)
                echo -e "${RED}❌ Invalid choice. Please select 1 or 2.${NC}"
                ;;
        esac
    done
}

# 브라일 로딩 애니메이션 함수
show_braille() {
    local pid=$1
    local delay=0.08
    local braille="⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"
    local i=0
    
    while kill -0 "$pid" 2>/dev/null; do
        printf "\r${CYAN}$(msg "ai_reviewing") ${braille:$i:1}${NC}"
        i=$(((i+1) % ${#braille}))
        sleep $delay
    done
    printf "\r${CYAN}$(msg "ai_reviewing") ✓${NC}\n"
}

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# 설정 로드
load_config

# 플래g 변수 초기화  
TARGET_BRANCH=""
BASE_BRANCH="main"
DIFF_MODE=false
POST_COMMENT=false
PR_NUMBER=""
PR_TITLE=""

# 인자 처리
while [[ $# -gt 0 ]]; do
    case $1 in
        --configure)
            if [ -z "$LANGUAGE" ]; then
                first_time_setup
            else
                configure_language
            fi
            exit 0
            ;;
        --diff)
            DIFF_MODE=true
            shift
            if [[ $# -gt 0 && ! $1 =~ ^-- ]]; then
                BASE_BRANCH="$1"
                shift
            fi
            ;;
        --post-comment)
            POST_COMMENT=true
            shift
            ;;
        --version|-v)
            echo "gemini-pr-review-assistant v1.1.4"
            echo "AI-powered PR review and analysis using Gemini CLI"
            echo ""
            echo "Dependencies:"
            echo "  - Node.js >=16.0.0"
            echo "  - @google/gemini-cli >=0.1.0 (required)"
            echo "  - gh (GitHub CLI) - optional for PR integration & comments"
            echo ""
            echo "Repository: https://github.com/geonhwiii/gemini-pr-review-assistant"
            echo "npm: https://www.npmjs.com/package/gemini-pr-review-assistant"
            exit 0
            ;;
        --help|-h)
            # --help는 언어 설정과 관계없이 기본 도움말 표시
            echo -e "${BOLD}🔍 AI PR Review CLI - AI-powered pull request review and analysis${NC}"
            echo ""
            echo -e "${CYAN}Usage:${NC}"
            echo -e "  aipr                    # Review current branch PR"
            echo -e "  aipr <branch>           # Review specific branch PR"
            echo -e "  aipr --diff <base>      # Compare with specific base branch"
            echo -e "  aipr --post-comment     # Post review as PR comment"
            echo ""
            echo -e "${CYAN}Options:${NC}"
            echo -e "  <branch>                # Target branch to review"
            echo -e "  --diff <base>           # Compare with base branch (default: main)"
            echo -e "  --post-comment          # Post AI review as GitHub PR comment"
            echo -e "  --configure             # Configure language settings"
            echo -e "  --version, -v           # Show version information"
            echo -e "  --help, -h              # Show help"
            echo ""
            echo -e "${CYAN}Examples:${NC}"
            echo -e "  aipr                    # Review current branch"
            echo -e "  aipr feature/login      # Review feature/login branch"
            echo -e "  aipr --diff develop     # Compare current branch with develop"
            echo -e "  aipr --post-comment     # Review and post comment to PR"
            echo ""
            exit 0
            ;;
        -*)
            echo -e "${RED}Unknown option: $1${NC}"
            echo -e "Usage: aipr [branch] [--diff base] [--post-comment] [--configure] [--version|-v] [--help|-h]"
            exit 1
            ;;
        *)
            TARGET_BRANCH="$1"
            shift
            ;;
    esac
done

# 최초 실행 체크 (--help가 아닌 경우에만)
if [ -z "$LANGUAGE" ]; then
    first_time_setup
fi

echo -e "${MAGENTA}$(msg "welcome")${NC}"

# Git 저장소 확인
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo -e "${RED}$(msg "not_git_repo")${NC}"
    exit 1
fi

# GitHub PR 정보 가져오기 함수
get_pr_info() {
    local branch=$1
    if command -v gh >/dev/null 2>&1; then
        # 방법 1: 현재 브랜치의 PR을 직접 찾기
        if [ "$branch" = "$(git branch --show-current)" ]; then
            PR_INFO=$(gh pr view --json number,title,body 2>/dev/null)
        fi
        
        # 방법 1이 실패하거나 다른 브랜치인 경우, head 브랜치로 검색
        if [ -z "$PR_INFO" ] || [ "$PR_INFO" = "null" ]; then
            PR_LIST=$(gh pr list --head "$branch" --json number,title,body --limit 1 2>/dev/null)
            if [ -n "$PR_LIST" ] && [ "$PR_LIST" != "[]" ]; then
                PR_INFO=$(echo "$PR_LIST" | sed 's/^\[\s*//' | sed 's/\s*\]$//' | head -1)
            fi
        fi
        
        # 방법 2도 실패한 경우, 원격 브랜치 이름으로 시도
        if [ -z "$PR_INFO" ] || [ "$PR_INFO" = "null" ]; then
            # origin/branch-name 형태로 시도
            REMOTE_BRANCH="origin/$branch"
            PR_LIST=$(gh pr list --head "$REMOTE_BRANCH" --json number,title,body --limit 1 2>/dev/null)
            if [ -n "$PR_LIST" ] && [ "$PR_LIST" != "[]" ]; then
                PR_INFO=$(echo "$PR_LIST" | sed 's/^\[\s*//' | sed 's/\s*\]$//' | head -1)
            fi
        fi
        
        # PR 정보 파싱
        if [ -n "$PR_INFO" ] && [ "$PR_INFO" != "null" ] && [ "$PR_INFO" != "[]" ]; then
            PR_NUMBER=$(echo "$PR_INFO" | grep -o '"number":[0-9]*' | cut -d':' -f2)
            PR_TITLE=$(echo "$PR_INFO" | grep -o '"title":"[^"]*"' | cut -d'"' -f4)
            if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "" ]; then
                return 0
            fi
        fi
    fi
    return 1
}

# PR에 댓글 작성 함수
post_pr_comment() {
    local review_content="$1"
    if [ -n "$PR_NUMBER" ] && command -v gh >/dev/null 2>&1; then
        echo -e "${CYAN}$(msg "posting_comment")${NC}"
        
        # 마크다운 형식으로 리뷰 포맷팅
        local formatted_review="## 🤖 AI Code Review

$review_content

---
*Generated by [gemini-pr-review-assistant](https://www.npmjs.com/package/gemini-pr-review-assistant)*"
        
        if gh pr comment "$PR_NUMBER" --body "$formatted_review" >/dev/null 2>&1; then
            echo -e "${GREEN}$(msg "comment_posted")${NC}"
            return 0
        else
            echo -e "${RED}$(msg "comment_failed")${NC}"
            return 1
        fi
    fi
    return 1
}

# Gemini CLI 설치 확인
if ! command -v gemini >/dev/null 2>&1; then
    echo -e "${YELLOW}$(msg "gemini_not_installed")${NC}"
    exit 1
fi

# GitHub CLI 설치 확인 (옵션)
if [ "$POST_COMMENT" = true ] && ! command -v gh >/dev/null 2>&1; then
    echo -e "${YELLOW}$(msg "gh_not_installed")${NC}"
    echo ""
fi

# 현재 브랜치 확인
if [ -z "$TARGET_BRANCH" ]; then
    # 방법 1: git branch --show-current (Git 2.22+)
    CURRENT_BRANCH=$(git branch --show-current 2>/dev/null)
    
    # 방법 1이 실패한 경우 방법 2: git rev-parse (더 호환성 있음)
    if [ -z "$CURRENT_BRANCH" ]; then
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    fi
    
    # 방법 2도 실패한 경우 방법 3: git branch
    if [ -z "$CURRENT_BRANCH" ]; then
        CURRENT_BRANCH=$(git branch 2>/dev/null | grep "^\*" | cut -d' ' -f2-)
    fi
    
    # 모든 방법이 실패한 경우 기본값
    if [ -z "$CURRENT_BRANCH" ]; then
        CURRENT_BRANCH="unknown-branch"
    fi
    
    TARGET_BRANCH="$CURRENT_BRANCH"
fi

# DEBUG: 브랜치 정보 출력
echo -e "${YELLOW}[DEBUG] TARGET_BRANCH value: '$TARGET_BRANCH'${NC}"
echo -e "${YELLOW}[DEBUG] git branch --show-current: '$(git branch --show-current 2>/dev/null)'${NC}"
echo -e "${YELLOW}[DEBUG] git rev-parse --abbrev-ref HEAD: '$(git rev-parse --abbrev-ref HEAD 2>/dev/null)'${NC}"

echo -e "${CYAN}$(msg "current_branch" "$TARGET_BRANCH")${NC}"

# PR 정보 가져오기 시도
echo -e "${YELLOW}[DEBUG] Checking GitHub CLI availability...${NC}"
if command -v gh >/dev/null 2>&1; then
    echo -e "${YELLOW}[DEBUG] GitHub CLI found, checking authentication...${NC}"
    gh auth status 2>/dev/null || echo -e "${YELLOW}[DEBUG] GitHub CLI not authenticated${NC}"
    
    echo -e "${YELLOW}[DEBUG] Searching for PR with branch: '$TARGET_BRANCH'${NC}"
    echo -e "${YELLOW}[DEBUG] Method 1 - gh pr view (current branch):${NC}"
    gh pr view --json number,title,body 2>&1 | head -3
    
    echo -e "${YELLOW}[DEBUG] Method 2 - gh pr list --head '$TARGET_BRANCH':${NC}"
    gh pr list --head "$TARGET_BRANCH" --json number,title,body --limit 1 2>&1 | head -3
    
    echo -e "${YELLOW}[DEBUG] Method 3 - gh pr list --head 'origin/$TARGET_BRANCH':${NC}"
    gh pr list --head "origin/$TARGET_BRANCH" --json number,title,body --limit 1 2>&1 | head -3
else
    echo -e "${YELLOW}[DEBUG] GitHub CLI not found${NC}"
fi

if get_pr_info "$TARGET_BRANCH"; then
    echo -e "${CYAN}$(msg "pr_found" "$PR_NUMBER" "$PR_TITLE")${NC}"
else
    echo -e "${YELLOW}$(msg "no_pr_found")${NC}"
fi

# 차이점 분석
if [ "$DIFF_MODE" = true ]; then
    echo -e "${CYAN}$(msg "analyzing_diff" "$TARGET_BRANCH" "$BASE_BRANCH")${NC}"
    DIFF_OUTPUT=$(git diff "$BASE_BRANCH".."$TARGET_BRANCH" 2>/dev/null)
else
    echo -e "${CYAN}$(msg "analyzing_branch")${NC}"
    DIFF_OUTPUT=$(git diff "$BASE_BRANCH".."$TARGET_BRANCH" 2>/dev/null)
fi

# 변경사항이 있는지 확인
if [ -z "$DIFF_OUTPUT" ]; then
    echo -e "${YELLOW}$(msg "no_changes")${NC}"
    exit 1
fi

# Git 로그 및 파일 변경사항 수집
COMMIT_LOG=$(git log "$BASE_BRANCH".."$TARGET_BRANCH" --oneline --no-merges | head -10)
FILE_CHANGES=$(git diff --name-status "$BASE_BRANCH".."$TARGET_BRANCH")

# 언어별 Gemini 프롬프트 생성
PR_INFO_TEXT=""
if [ -n "$PR_NUMBER" ]; then
    PR_INFO_TEXT="PR #$PR_NUMBER: $PR_TITLE"
else
    PR_INFO_TEXT="Branch comparison (no PR found)"
fi

if [ "$LANGUAGE" = "en" ]; then
    REVIEW_PROMPT="You are an expert code reviewer. Analyze this pull request and provide a comprehensive review.

PULL REQUEST ANALYSIS:

$PR_INFO_TEXT
Target Branch: $TARGET_BRANCH
Base Branch: $BASE_BRANCH

COMMIT HISTORY:
$COMMIT_LOG

FILE CHANGES:
$FILE_CHANGES

CODE DIFF:
$(echo "$DIFF_OUTPUT" | head -100)

Please provide a detailed review covering:

1. **Security Issues**: Any potential security vulnerabilities
2. **Performance Issues**: Performance concerns and optimization opportunities  
3. **Code Quality**: Code structure, readability, maintainability
4. **Best Practices**: Adherence to coding standards and best practices
5. **Suggestions**: Specific improvement recommendations

Format your response with clear sections and bullet points for easy reading.
Use English language for the review."
else
    REVIEW_PROMPT="당신은 전문 코드 리뷰어입니다. 이 풀 리퀘스트를 분석하고 포괄적인 리뷰를 제공해주세요.

풀 리퀘스트 분석:

$PR_INFO_TEXT
대상 브랜치: $TARGET_BRANCH
베이스 브랜치: $BASE_BRANCH

커밋 히스토리:
$COMMIT_LOG

파일 변경사항:
$FILE_CHANGES

코드 차이점:
$(echo "$DIFF_OUTPUT" | head -100)

다음 항목들을 포함한 자세한 리뷰를 제공해주세요:

1. **보안 이슈**: 잠재적인 보안 취약점
2. **성능 이슈**: 성능 문제 및 최적화 기회
3. **코드 품질**: 코드 구조, 가독성, 유지보수성
4. **모범 사례**: 코딩 표준 및 모범 사례 준수
5. **제안사항**: 구체적인 개선 권장사항

명확한 섹션과 불릿 포인트로 읽기 쉽게 형식을 맞춰주세요.
리뷰는 한국어로 작성해주세요."
fi

# Gemini CLI 호출
AI_REVIEW=""
TEMP_OUTPUT="/tmp/gemini_pr_review_$$"
(gemini --model gemini-2.5-flash --prompt "$REVIEW_PROMPT" 2>&1 > "$TEMP_OUTPUT"; echo $? > "/tmp/gemini_pr_exit_$$") &
GEMINI_PID=$!

# 브라일 애니메이션 시작
show_braille $GEMINI_PID

# 프로세스 완료 대기
wait $GEMINI_PID

# 결과 읽기
GEMINI_OUTPUT=$(cat "$TEMP_OUTPUT")
GEMINI_EXIT_CODE=$(cat "/tmp/gemini_pr_exit_$$")

# 임시 파일 정리
rm -f "$TEMP_OUTPUT" "/tmp/gemini_pr_exit_$$"

# Gemini CLI 실행 결과 처리
if [ $GEMINI_EXIT_CODE -eq 0 ]; then
    # "Loaded cached credentials." 제거하고 의미있는 출력 추출
    AI_REVIEW=$(echo "$GEMINI_OUTPUT" | grep -v "Loaded cached credentials" | grep -v "^$" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    
    echo ""
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${GREEN}$(msg "ai_review_complete")${NC}"
    echo -e "${BLUE}============================================================${NC}"
    echo ""
    echo -e "${BOLD}$AI_REVIEW${NC}"
    echo ""
    echo -e "${BLUE}============================================================${NC}"
    
    # PR 댓글 작성 (요청된 경우)
    if [ "$POST_COMMENT" = true ]; then
        if [ -n "$PR_NUMBER" ] && command -v gh >/dev/null 2>&1; then
            echo ""
            post_pr_comment "$AI_REVIEW"
        else
            if [ -z "$PR_NUMBER" ]; then
                echo -e "${YELLOW}⚠️  No PR found for current branch. Cannot post comment.${NC}"
            elif ! command -v gh >/dev/null 2>&1; then
                echo -e "${YELLOW}$(msg "gh_not_installed")${NC}"
            fi
        fi
    fi
else
    echo -e "${RED}Failed to get AI review. Exit code: $GEMINI_EXIT_CODE${NC}"
    exit 1
fi